extend TRoom
{
	TBoolean	Main	();
	TBoolean	GetAllRoomObjects	(); // Loads all the objects through a rooom into scripted sections.


	TBoolean	TRoomObjSubItemFound (TRoomObj theObject, TString theOrderCodeMatch);
	TBoolean	TRoomObjSubItemHeight	(TRoomObj theObject, TString theOrderCodeMatch);

	TString		TRoomObjSetSeenSideOption	(TRoomObj theObject); // Not Being Used

	TBoolean	TRoomObjDoNotUseDepth		(TRoomObj theObject);
	TBoolean	TRoomObjSetSeenSideHeight	(TRoomObj theObject);
}

extend TRoomObj
{
	TBoolean 	CheckForSubItem			(TString OrderCode);
	TRoomObj 	GetSubItem			(TString OrderCode);
	
	TBoolean	AdjustHeightToMatchUnit		(TRoomObj parentObject);
	TBoolean	AdjustDepthToMatchUnit		(TRoomObj parentObject);
	TBoolean	AdjustRoomObjectForOrientation	(TDist YValue, TDist originalYValue);
}

TBoolean
TRoom::Main	()
{
	GetAllRoomObjects();
	return kTrue;
}

TBoolean
TRoom::TRoomObjSubItemFound (TRoomObj theObject, TString theOrderCodeMatch)
{
	TInteger theSubItemsCount ();
	TInteger loop ();
	theSubItemsCount:=theObject.CountSubItems(); // Detect if Linked Objects Exist
	for (loop:=1;loop<=theSubItemsCount;loop+=1)
	{
		TRoomObj theSubObject;
		theSubObject &= theObject.GetNthSubItem(loop);
		if(theSubObject.GetUnitName() == theOrderCodeMatch) then
		{
			return kTrue;
		}
	}

	return kFalse;
}

TBoolean
TRoom::TRoomObjSubItemHeight(TRoomObj theObject , TString theOrderCodeMatch)
{
	TInteger theSubItemsCount ();
	TInteger loop ();
	TBoolean	setDepth (kFalse);
	setDepth:= TRoomObjDoNotUseDepth(theObject);
	theSubItemsCount := theObject.CountSubItems ();
	if (theSubItemsCount >0) then
	{
		for (loop:=1;loop<=theSubItemsCount;loop+=1)
		{
			TRoomObj theSubObject;
			theSubObject &= theObject.GetNthSubItem(loop);

			if (theSubObject.GetOrderCode() == theOrderCodeMatch) then
			{
				TDist dstX ();
				TDist dstY ();
				TDist dstZ ();
				TObjectDimensions theObjectDims;
				TObjectDimensions theSubObjectDims;
				theObjectDims := theObject.GetDimensions();
				theSubObjectDims := theSubObject.GetDimensions ();
				if (setDepth==kFalse) then
				{
					theObjectDims.GetGraphic(TDist(),TDist(),dstZ);
					theSubObjectDims.GetGraphic(dstX,dstY,TDist());
					theSubObjectDims.SetGraphic(dstX,dstY,dstZ);
				}
				else
				{
					theObjectDims.GetGraphic(TDist(),dstY,dstZ);
					theSubObjectDims.GetGraphic(TDist(),dstX,TDist());
					theSubObjectDims.SetGraphic(dstY,dstX,dstZ);
				}

				theSubObject.SetDimensions(theSubObjectDims);
			}

		}
	}
	return kTrue;
}

TBoolean
TRoom::TRoomObjDoNotUseDepth		(TRoomObj theObject)
{
	TString [] restrictedCodes ();
	restrictedCodes.AddItem("FC90");
	restrictedCodes.AddItem("WC90");
	TInteger loop (1);
	for (loop:=1;loop<= restrictedCodes.Count();loop+=1)
	{
		if (theObject.GetOrderCode () == restrictedCodes[loop]) then
		{
			return kFalse;
		}
	}
	return kTrue;
}




TBoolean
TRoom::TRoomObjSetSeenSideHeight(TRoomObj theObject)
{
	if (theObject.CountSubItems() >0) then
	{
		if (TRoomObjSubItemHeight(theObject, "Exposed Side Left" )==kTrue) then
		{
			if (TRoomObjSubItemHeight(theObject,"Exposed Side Right")==kTrue) then
			{
				return (kTrue);
			}
			else
			{
				return (kTrue);
			}
		}
		else
		{
			if (TRoomObjSubItemHeight(theObject, "Exposed Side Right")==kTrue) then
			{
				return (kTrue);
			}
		}
	}
	return (kFalse);
}

TRoomObj
TRoomObj::CheckForSubItem(TString orderCode)
{
	if(CountSubItems()>0) then
	{
		// Loop Through all Sub Items and Check Order Code
		TInteger theSubItemsCount();
		TInteger loop ();
		theSubItemsCount := CountSubItems ();
		for (loop:=1;loop<=theSubItemsCount;loop+=1)
		{
			TRoomObj theSubObject;
			theSubObject &= GetNthSubItem(loop);
			if (theSubObject.GetOrderCode() == orderCode) then return kTrue;	
		}
	}
	return kFalse;
}

TRoomObj
TRoomObj::GetSubItem(TString orderCode)
{
	if(CountSubItems()>0) then
	{
		// Loop Through all Sub Items and Check Order Code
		TInteger theSubItemsCount();
		TInteger loop ();
		theSubItemsCount := CountSubItems ();
		for (loop:=1;loop<=theSubItemsCount;loop+=1)
		{
			TRoomObj theSubObject;
			theSubObject &= GetNthSubItem(loop);
			if (theSubObject.GetOrderCode() == orderCode) then return theSubObject;	
		}
	}
	return kFalse;
}

TBoolean
TRoomObj::AdjustHeightToMatchUnit(TRoomObj parentObject)
{
	TDist dstX ();
	TDist dstY ();
	TDist dstZ ();
	TObjectDimensions parentDims;
	TObjectDimensions nativeDims;
	nativeDims := GetDimensions();
	parentDims := parentObject.GetDimensions();
	
	parentDims.GetGraphic(TDist(),TDist(),dstZ);
	nativeDims.GetGraphic (dstX,dstY,TDist());
	nativeDims.SetGraphic (dstX,dstY,dstZ);
	
	SetDimensions(nativeDims);
	return kTrue;
}

TBoolean
TRoomObj::AdjustRoomObjectForOrientation (TDist YValue, TDist originalYValue)
{

	TDist posX ();
	TDist posY ();
	TDist posZ ();
	GetObjectPos(posX,posY,posZ);
	
	SetObjectPos(posX,posY+(YValue-originalYValue),posZ);
	return kTrue;
}

TBoolean
TRoomObj::AdjustDepthToMatchUnit(TRoomObj parentObject)
{
	TDist dstX ();
	TDist dstY ();
	TDist dstZ ();
	TDist originalDepth ();
	TObjectDimensions parentDims;
	TObjectDimensions nativeDims;
	nativeDims := GetDimensions();
	parentDims := parentObject.GetDimensions();
	
	parentDims.GetGraphic(TDist(),dstX,TDist());
	nativeDims.GetGraphic (originalDepth,dstY,dstZ);
	nativeDims.SetGraphic (dstX,dstY,dstZ);
	
	TFloat OrientationZ ();
	TFloat ParentOrientationZ ();
	parentObject.GetObjectOrientation (TFloat(),TFloat(),ParentOrientationZ);
	GetObjectOrientation (TFloat(),TFloat(),OrientationZ);
	if (OrientationZ < TFloat(270)) then
	{
		OrientationZ := OrientationZ+TFloat(360);
	}
	if (ParentOrientationZ-OrientationZ==TFloat(-270)) then
	{
		AdjustRoomObjectForOrientation(dstX,originalDepth);
	}
	
	SetDimensions(nativeDims);
	
	/// Hey If Orienation Z is 270 then We need to Adjsut the Units Position
	return kTrue;
}

TBoolean
TRoom::GetAllRoomObjects()
{
	TInteger loop();
	for (loop:=1;loop<= CountObjects();loop+=1)
	{
		TRoomObj theObject;
		theObject &=GetNthObject(loop);
		if (theObject.CheckForSubItem("Exposed Side Left")) then
		{
			TRoomObj sideExposed;
			sideExposed &= theObject.GetSubItem("Exposed Side Left");
			sideExposed.AdjustHeightToMatchUnit(theObject);
			sideExposed.AdjustDepthToMatchUnit(theObject);
		}
		if (theObject.CheckForSubItem("Exposed Side Right")) then
		{
			TRoomObj sideExposed;
			sideExposed &= theObject.GetSubItem("Exposed Side Right");
			sideExposed.AdjustHeightToMatchUnit(theObject);
			
			sideExposed.AdjustDepthToMatchUnit(theObject);
		}
		
		
		
		
		
	}
	return kTrue;
}


//For Debugging Purposes
TString
TRoom::TRoomObjSetSeenSideOption(TRoomObj theObject)
{
	if (theObject.CountSubItems() >0) then
	{
		if (TRoomObjSubItemFound(theObject, "Exposed Side Left" )==kTrue) then
		{
			if (TRoomObjSubItemFound(theObject,"Exposed Side Right")==kTrue) then
			{
				return ("Both");
			}
			else
			{
				return (" Left");
			}
		}
		else
		{
			if (TRoomObjSubItemFound(theObject, "Exposed Side Right")==kTrue) then
			{
				return (" Right");
			}
		}
	}
	return ("  None");
}